--# What is a Package?
A package is a schema object that groups logically related PL/SQL types, variables,
constants, subprograms, cursors, and exceptions. A package is compiled and stored in the 
database, where many applications can share its contens.

A package always has a specification, which declares the public items that can be 
referenced from outside of the package.

If the public items includes cursor or subprograms, then the package must also have a body.
The body must define queries for public cursor and code for public subprograms. The body
can also declare and define private items that can not be referenced from outside the 
package, but are necessary for the internal workings of the package.

Finally, the body can have an initialization part, whose statements initialize variables 
and do other one time setup, and an exception-handling part.

The AUTHID Clause of the package specifies deermines whether the subprograms and 
cursors in the package run with the privileges of their definer (the default) or invoker.

The ACCESSIBLE BY clause of the package specification lets us specify a white list of 
PL/SQL units that can be access the package. 

We use this clause in situation like:
You implement a PL/SQL application as several packages—one package that
provides the application programming interface (API) and helper packages to do
the work. You want clients to have access to the API, but not to the helper
packages. Therefore, you omit the ACCESSIBLE BY clause from the API package
specification and include it in each helper package specification, where you
specify that only the API package can access the helper package.
• You create a utility package to provide services to some, but not all, PL/SQL units
in the same schema. To restrict use of the package to the intended units, you list
them in the ACCESSIBLE BY clause in the package specification.


--# Creating Package Specifications 

--# Example 10-1 Simple Package Specification
CREATE OR REPLACE PACKAGE trans_data AUTHID DEFINER AS 
    TYPE TimeRec IS RECORD (
        minutes SMALLINT,
        hours   SMALLINT
    );
    
    TYPE TransRec IS RECORD (
        category    VARCHAR2(10),
        account     INT,
        amount      REAL,
        time_of     TimeRec
    );
    
    minimum_balance     CONSTANT REAL := 10.00;
    number_processed    INT;
    insufficient_fund   EXCEPTION;
    PRAGMA EXCEPTION_INIT(insufficient_fund, -4097);
END trans_data;
/

--# Example 10-2 Passing Associative Array to Standalone Subprogram.
CREATE OR REPLACE PACKAGE aa_pkg AUTHID DEFINER IS 
    TYPE aa_type    IS TABLE OF INTEGER INDEX BY VARCHAR2(15);
END;
/

CREATE OR REPLACE PROCEDURE print_aa(
    aa AA_PKG.aa_type
    ) AUTHID DEFINER IS
    i VARCHAR2(15);
BEGIN 
    i := aa.FIRST;
    
    WHILE i IS NOT NULL LOOP 
        DBMS_OUTPUT.PUT_LINE(aa(i) || ' '|| i);
        i := aa.NEXT(i);
    END LOOP;
END;
/

DECLARE 
    aa_var  AA_PKG.aa_type;
BEGIN 
    aa_var('zero') := 0;
    aa_var('one') := 1;
    aa_var('two') := 2;
    print_aa(aa_var);
END;
/

