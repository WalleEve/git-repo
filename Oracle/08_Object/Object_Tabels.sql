--# Object Tables

--# Object Tables are created by using the user defined Data Types.
--# In an Object Table Each row or record is treated as an Object.
--# Each row in an object table has an object Identifier(OID), which is uniqueu through out the Database.
--# The OID is generated and assigned By Oracle when the Row oe Object is Created. 
--# The rows or objects of an object table can be referenec by other objects with in the Database.
--# An object  table is created using the CEEATE TABLE command.
--# All object tables automatically inherit the data types from the User defined data types.
--# All object types are associated with default methods applied upon the relational tables
--# INSERT, DELETE, UPDATE, and SELECT.
--# The relational DML operations style is accepted only when the user defined data types is a collection of 
--# Built-in data types and the object Table does not contain any REF Constraints.

--# Creating an user defined Object Type 

--# Syntax:
/*
CREATE OR REPLACE TYPE <type_name>
AS OBJECT
(
columnName1 DataType(size),
columnName2 DataType(size),
columnName3 DataType(size)
);
*/

--# All user defined Data Types are schema objects of the DataBase.
--# The user defined objects data type can be used as referenced in other table, or 
--# instantiated as Object table Directly.
--# All user defined data types and objects are stored permanently in the data dictionary 
--# . USER_TYPES
--# . USER_OBJECTS

--# select type_name, typecode, attributes, methods from user_types;
SELECT type_name, typecode, attributes, methods
FROM USER_TYPES;
/

SELECT object_name, object_type
FROM USER_OBJECTS;
/

-- Creating User Defined Student Type 

CREATE OR REPLACE TYPE Student
as OBJECT
(
student_id number(6),
student_name varchar2(20),
date_of_birth date,
date_of_addmission date,
fees number(7, 2));
/


--# This data type is also called as collection in Oracle
--# and this collection is resuable 

--# Creating an Object Table 
/*
CREATE TABLE table_name
OF type_name;
*/


CREATE TABLE McaStudent
OF student;
/

--# The above statement creates the object table mcastudent as an abstract data type.
--# Each row in the object table as an OID value generated by Oracle server.
--# The rows in the object table are feferenced as OBJECTS.

--# INSERTING Rows Into OBJECT TABLES.

--# To INSERT a record into an OBJECT TABLE we may use the CONSTRUCTOR METHOD 
--# Of the Data Type OR Directly implement the RELATIONAL INSERT Statement.
--# The Normal INSERT OR RELATIONAL INSERT is possible only when the table does not contain any NESTED data types.


INSERT INTO mcastudet 
VALUES(1234, 'SAYED', '08-Jan-1991', sysdate, 15000);
/

--# Insert Records into Specific Columns 

INSERT INTO mcastudent(student_id, student_name) 
VALUES(1235, 'MAHFUZE');
/

--# INSERT using CONSTRUCTOR Method 

INSERT INTO mcastudent
VALUES(
student(
	1236,
	'RAHEMAN',
	'12-Apr-1991',
	sysdate,
	13000
	)
);
/

insert into mca_student values(
1234,
'SAYED',
'12-Apr-1991',
sysdate,
15000);
/
insert into mca_student(mca_student.student_id, mca_student.student_name, fees)
values(1235, 'MAHFUZE', 13000);
/

insert into mca_student values(
student(
1236,'RAHEMAN', '08-Jan-1991', sysdate, 14000));
/

select STUDENT_ID ,
STUDENT_NAME ,
DATE_OF_BIRTH ,
DATE_OF_ADDMISSION ,
FEES  from mca_student;
/

--# UPDATE Data from OBJECT TABLES 

update mca_student ms set ms.fees=15000 
where ms.student_id = 1236;
/
--# DELETE data from OBJECT TABLE 
delete from mca_student ms where ms.student_id=1235;
delete from mca_student; 
/

--# The abstract data types column can be referred as a part of the Table's column.

--# CREATING TABLE WITH USER DEFINED DATA TYPE 

CREATE TABLE mba_students(
student_coll student,
semester varchar2(10),
sem_start_date date,
sem_end_date date,
specialization varchar2(20)
);
/

/*
Once the user defined data typs are created we can instantiate them in the normal relational tables.
These instances look as normal attributes with in the table,  but can be 
operated only with CONSTRUCTOR METHOD OR OBJECT VIEWS.
In any of the operation we have to provide reference to all attributes with in the Instance, but partial 
Association is not Accepted.
*/


insert into mba_students 
values(
student(1234, 'Sabiha', '06-Apr-1997', sysdate, 25000),
'First',
'25-Jul-2022',
'25-Oct-2022',
'Finance'
);
/

select * from mba_students; 
select student_coll from mba_students;

--# The REF() Function 
--# The REF() Function allows to reference existing row objects.
--# The OID Assigned to each row can be seen by using the REF Function

select ref(a) from mca_student a
where student_name='SAYED';

--# REF() always returns the OID of the registered Objects in the Object Table.
--# REF() always expects the alias of the object table as argument.
--# The REF(a) value will be different under different systems and may be wrapped into multiple lines.
--# The REF() function can only reference row objects, hence we can not use REF() for referencing column objects.
/*
The column objects can be types:
. Abstract Data Type
. LOB's
. Collections 

The REF() function by itself does not give any useful informtion.
*/

--# DEREF() Function 
--# The DEREF() function takes a REFERENCE value, the OID generated for a Reference and Returns the Original value of the row Object.

create table studentIncharege(
inchange_name varchar2(30),
student_incharge REF STUDENT
);
/
--# The studentincharge column references the data that is stored Else where in the System.
--# The REF() function points the studentincharge column to a ROW OBJECT of the STUDENT data type.
 
 desc studentIncharege;
set describe depth all LINENUM on;
 desc studentIncharege;
 
 --# To insert records into reference table s we have to use the REF() function 
 --# the REF column always contains only OID's 
 
 insert into studentIncharege 
 select 'Sabiha Naaz',
 ref(A)
 from mca_student A
 where A.student_name='SAYED';
 /
 
 select * from studentIncharege;
 
 select ref(e) from studentIncharege e;
 
 select deref(x.studentIncharege)
 from studentIncharege x where inchange_name='Sabiha Naaz'; --# ORA-00904: "X"."STUDENTINCHAREGE": invalid identifier
 
 
create or replace type  cust_address_type
as object(
street varchar2(20),
city varchar2(20),
state_name varchar2(20),
country varchar2(20),
pin number
);
 
 create table address of cust_address_type;
 
INSERT INTO address VALUES (
   '123 First Street', 'Our Town', 'Ourcounty', 'US', 12345);
   
SELECT REF(e) FROM address e;

--# Implement VALUE() Function 

 



++





















